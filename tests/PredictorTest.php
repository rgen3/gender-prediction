<?php
/**
 * Created by PhpStorm.
 * User: alexander
 * Date: 09.01.17
 * Time: 9:52
 */

namespace tests;



use Rgen3\GenderPrediction\Language\LanguageException;
use Rgen3\GenderPrediction\Predictor;

class PredictorTest extends \PHPUnit_Framework_TestCase
{
    protected $predictor;
    protected $existingLangClass = 'Russian';
    protected $notExistingLangClass = 'Ololo';

    public function setPredictor(Predictor $predictor)
    {
        $this->predictor = $predictor;
        return $this;
    }

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setPredictor(new Predictor());
    }

    public function testCheckLanguageClass()
    {
        try
        {
            // not expecting exception
            $class = $this->existingLangClass;
            $this->predictor->checkLanguageClass($class);
        }
        catch(\Exception $e)
        {
            $this->fail();
        }

        // Exception
        $class = $this->notExistingLangClass;
        $this->expectException(LanguageException::class);
        $this->predictor->checkLanguageClass($class);
    }

    public function testSettingLanguageClass()
    {
        try
        {
            // Not expecting exception
            $this->predictor->setLanguage($this->existingLangClass);
        }
        catch (\Exception $e)
        {
            $this->fail();
        }

        // Expecting exception
        $this->expectException(LanguageException::class);
        $this->predictor->setLanguage($this->notExistingLangClass);
    }

    public function testGetDropdownItems()
    {
        try
        {
            $items = $this->predictor
                ->setLanguage($this->existingLangClass)
                ->getDropdownItems();


            $this->assertArrayHasKey(Predictor::MALE, $items);
            $this->assertArrayHasKey(Predictor::FEMALE, $items);
            $this->assertArrayHasKey(Predictor::NOT_SET, $items);
        }
        catch (\Exception $e)
        {
            $this->fail();
        }
    }

    public function testIsLanguageObjectIsInstanceOfInterface()
    {
        $this->predictor->setLanguage($this->existingLangClass);
        $lang = $this->predictor->getLanguage();

        $this->assertInstanceOf('\Rgen3\GenderPrediction\Language\ILanguage', $lang);
    }

}
